use crate::core::identifier::Identifier;
use crate::core::error::{JodinResult};
use crate::core::literal::Literal;
use crate::core::types::primitives::Primitive;
use crate::core::operator::Operator;
use crate::ast::{JodinNode, JodinNodeType, tags::LabeledStatementTag, CompoundType};
use crate::core::types::intermediate_type::IntermediateType;

use crate::parsing::Tok;
use crate::core::privacy::{Visibility, VisibilityTag};
use crate::core::types::StorageModifier;

use super::UnwrapVector;
use super::ParseResult;
use super::ExpressionMember;
use super::into_order_of_operations;

use std::iter::FromIterator;
use std::str::FromStr;



grammar<'input>(input: &'input str);



// atomic types
pub SingleIdentifier: Identifier =
    <s:"t_identifier"> => Identifier::from(s);

pub Identifier: Identifier = Joined<"t_identifier", "::"> => Identifier::from_iter(<>);

IdentifierNode: JodinNode = Identifier => JodinNode::new(JodinNodeType::Identifier(<>));


pub String: Literal = {
    "t_string_literal" => Literal::from_str(<>).unwrap(),
};

pub Literal: Literal = "t_constant" => {
    Literal::from_str(<>).unwrap()
};


pub IdentifierList = OptionalList<Identifier>;

pub CanonicalType: IntermediateType = {
    "unsigned" <TypeSpecifier> => <>.into_unsigned(),
    TypeSpecifier,
    <ty:TypeSpecifier> "<" <generics:OptionalList<CanonicalType>> ">" => {
        ty.with_generics(generics)
    },
    "fn" "(" <args:OptionalList<CanonicalType>> ")" "->" <ty:CanonicalType>  => {
        ty.with_function_params(args)
    },
    "fn" "(" <args:OptionalList<CanonicalType>> ")"  => {
        let ty: IntermediateType = Primitive::Void.into();
        ty.with_function_params(args)
    },
     "*" <ty:CanonicalType> => {
        ty.with_pointer()
    },
    "[" <ty:CanonicalType> "]" => {
        ty.with_abstract_array()
    },
    "[" <ty:CanonicalType> ":" <len:Expression> "]" => {
        ty.with_array(len.expect("This should be a constant expression"))
        .expect("Given length was invalid constant expression")
    },
}


TypeSpecifier: IntermediateType = {
    "boolean" => IntermediateType::from(Primitive::Boolean),
    "double" => IntermediateType::from(Primitive::Double),
    "float" => IntermediateType::from(Primitive::Float),
    "void" => IntermediateType::from(Primitive::Void),
    "char" => IntermediateType::from(Primitive::Char),
    "short" => IntermediateType::from(Primitive::Short),
    "int" => IntermediateType::from(Primitive::Int),
    "long" => IntermediateType::from(Primitive::Long),
    Identifier => IntermediateType::from(<>)
}


pub Visibility: Visibility = {
    "public" => Visibility::Public,
    "private" => Visibility::Private
}

pub Expression: JodinResult<JodinNode> = {
    ExpressionWrapper,
    <cond:ExpressionWrapper> "?" <t:Expression> ":" <f:Expression> => {
        JodinNodeType::Ternary {
            cond: cond?,
            yes: t?,
            no: f?
        }.into_result()
    }
}

ExpressionWrapper: JodinResult<JodinNode> = {
    BinopExpression => {
        Ok(into_order_of_operations(<>?))
    }
}

BinopExpression: JodinResult<Vec<ExpressionMember>> = {
    // Factor => Ok(vec![ExpressionMember::Factor(<>?)]),
    <hd:Factor> <tails:BinopTail*> => {
        let mut first = vec![ExpressionMember::Factor(hd?)];
        for tail in tails {
            first.extend(tail?);
        }
        Ok(first)
    }
}

BinopTail:  JodinResult<Vec<ExpressionMember>> = {
    <op:BiOperator> <tl:Factor> => {
        Ok(vec![ExpressionMember::Op(op), ExpressionMember::Factor(tl?)])
    }
}

pub UniOp: ParseResult = {
    "++" <Factor> => JodinNodeType::Uniop { op: Operator::Increment, inner: <>?}.into_result(),
    "--" <Factor> => JodinNodeType::Uniop { op: Operator::Decrement, inner: <>?}.into_result(),
    "+" <Factor>,
    "-" <Factor> => JodinNodeType::Uniop { op: Operator::Minus, inner: <>?}.into_result(),
    "!" <Factor> => JodinNodeType::Uniop { op: Operator::Not, inner: <>?}.into_result(),
    "&" <Factor> => JodinNodeType::Uniop { op: Operator::And, inner: <>?}.into_result(),
    "*" <Factor> => JodinNodeType::Uniop { op: Operator::Star, inner: <>?}.into_result(),
    "new" <Factor> => JodinNodeType::NewPointer { inner: <>? }.into_result(),
}

pub Factor:  ParseResult = {
    UniOp,
    String => JodinNodeType::Literal(<>).into_result(),
    Literal => JodinNodeType::Literal(<>).into_result(),
    "true" => JodinNodeType::Literal(Literal::Boolean(true)).into_result(),
    "false" => JodinNodeType::Literal(Literal::Boolean(false)).into_result(),
    CastExpression,
    AtomModifier
}

CastExpression: ParseResult = "(" <factor:Factor> "as" <c_type:CanonicalType> ")" => JodinNodeType::CastExpression {
    to_type: c_type,
    factor: factor?
 }.into_result();

Atom: JodinResult<JodinNode> = {
    "(" <Expression> ")",
    Identifier => JodinNodeType::Identifier(<>).into_result(),
    StructInitializer,
    ArrayInitializer
}



pub AtomModifier: ParseResult = {
    <atom: AtomModifier> <call: FunctionCall> => {
        let (generics, arguments) = call?;
        JodinNodeType::Call {
            called: atom?,
            generics_instance: generics,
            arguments
        }.into_result()
    },
    <atom: AtomModifier> <index: GetIndex> => {
        JodinNodeType::Index {
            indexed: atom?,
            expression: index?
        }.into_result()
    },
    <atom: AtomModifier> "." <field: SingleIdentifier> => {

            JodinNodeType::GetMember {
                compound: atom?,
                id: JodinNodeType::Identifier(field).into()
            }.into_result()

    },
    Atom,
}

pub ConstExpression: ParseResult = {
    ConstBinopExpression => {
        Ok(into_order_of_operations(<>?))
    }
}

ConstBinopExpression: JodinResult<Vec<ExpressionMember>> = {
    // Factor => Ok(vec![ExpressionMember::Factor(<>?)]),
    <hd:ConstFactor> <tails:ConstBinopTail*> => {
        let mut first = vec![ExpressionMember::Factor(hd?)];
        for tail in tails {
            first.extend(tail?);
        }
        Ok(first)
    }
}

ConstBinopTail:  JodinResult<Vec<ExpressionMember>> = {
    <op:BiOperator> <tl:ConstFactor> => {
        Ok(vec![ExpressionMember::Op(op), ExpressionMember::Factor(tl?)])
    }
}

ConstFactor: ParseResult = {
    String => JodinNodeType::Literal(<>).into_result(),
    Literal => JodinNodeType::Literal(<>).into_result(),
    "true" => JodinNodeType::Literal(Literal::Boolean(true)).into_result(),
    "false" => JodinNodeType::Literal(Literal::Boolean(false)).into_result(),
    "(" <ConstExpression> ")",
    Identifier => JodinNodeType::Identifier(<>).into_result(),

}



GenericInstance = "<" <OptionalList<CanonicalType>> ">";


ArgsList = OptionalList<Expression>;

FunctionCall: JodinResult<(Vec<JodinNode>, Vec<JodinNode>)> = {
    "(" <args: ArgsList> ")" => {
        let args = args.unwrap_vec()?;
        Ok((vec![], args))
    }
}

GetIndex: JodinResult<JodinNode> = {
    "[" <node:Expression> "]" => node
}

pub Statement: ParseResult = {
    AssignmentStatement,
    LabeledStatement,
    CompoundStatement,
    ExpressionStatement,
    SelectionStatement,
    IterationStatement,
    JumpStatement,
    VariableDeclaration
}

AssignmentStatement: ParseResult = {
    <atom:AtomModifier> <assign:"t_assign"> <exp:Expression> ";" => {
        JodinNodeType::AssignmentExpression {
            maybe_assignment_operator: Some(assign),
            lhs: atom?,
            rhs: exp?
        }.into_result()
    },
    <atom:AtomModifier> "=" <exp:Expression> ";" => {
            JodinNodeType::AssignmentExpression {
                maybe_assignment_operator: None,
                lhs: atom?,
                rhs: exp?
            }.into_result()
        }
}


LabeledStatement: ParseResult = {
    <id:SingleIdentifier> ":" <st: Statement> => {
        let mut ret = st?;
        ret.add_tag(LabeledStatementTag::new(id.to_string()))?;
        Ok(ret)
    },
    "case" <case:ConstExpression> ":" <st:Statement> => {
        JodinNodeType::Case {
            case: Some(case?),
            statement: st?
        }.into_result()
    },
    "default" ":" <st:Statement> => {
        JodinNodeType::Case {
            case: None,
            statement: st?
        }.into_result()
    },
}

CompoundStatement: ParseResult = {
    "{" <Statement*> "}" => JodinNodeType::Block { expressions: <>.unwrap_vec()? }.into_result()
}

ExpressionStatement: ParseResult = {
    <Expression> ";",
    ";" => JodinNodeType::Empty.into_result()
}

SelectionStatement: ParseResult = {
    "if" "(" <cond:Expression> ")" <yes:CompoundStatement> => {
        JodinNodeType::IfStatement {
            cond: cond?,
            statement: yes?,
            else_statement: None
        }.into_result()
    },
    "if" "(" <cond:Expression> ")" <yes:CompoundStatement> "else" <no:SelectionStatement> => {
        JodinNodeType::IfStatement {
            cond: cond?,
            statement: yes?,
            else_statement: Some(no?)
        }.into_result()
    },
    "if" "(" <cond:Expression> ")" <yes:CompoundStatement> "else" <no:CompoundStatement> => {
        JodinNodeType::IfStatement {
            cond: cond?,
            statement: yes?,
            else_statement: Some(no?)
        }.into_result()
    },
    "switch" "(" <on_switch:Expression> ")" "{" <labels:LabeledStatement*> "}" => {
        JodinNodeType::SwitchStatement {
            to_switch: on_switch?,
            labeled_statements: labels.unwrap_vec()?
        }.into_result()
    }
}

IterationStatement: ParseResult = {
    "while" "(" <cond:Expression> ")" <stat:CompoundStatement> => {
        JodinNodeType::WhileStatement {
            cond: cond?,
            statement: stat?
        }.into_result()
    },
    "for" "(" <init:Statement> <cond:Statement> <delta:Expression?> ")" <stat:CompoundStatement> => {
        match delta {
            Some(delta) => {
                 JodinNodeType::ForStatement {
                    init: init?.not_empty(),
                    cond: cond?.not_empty(),
                    delta: Some(delta?),
                    statement: stat?
                }.into_result()
            },
            None => {
                JodinNodeType::ForStatement {
                    init: init?.not_empty(),
                    cond: cond?.not_empty(),
                    delta: None,
                    statement: stat?
                }.into_result()
            }
        }

    },
    "foreach" "(" <id:SingleIdentifier> ":" <ty:CanonicalType> "in" <ex:Expression> ")" <stat:CompoundStatement> => {

        unimplemented!()
    }
}

JumpStatement: ParseResult = {
    "continue" ";" => JodinNodeType::Continue.into_result(),
    "break" <id:SingleIdentifier?> ";" => {
        JodinNodeType::Break {
            id
        }.into_result()
    },
    "return" <exp:Expression?> ";" => {
        match exp {
            Some(exp) => {
                JodinNodeType::ReturnValue {
                    expression: Some(exp?)
                }.into_result()
            },
            None => {
                JodinNodeType::ReturnValue {
                    expression: None
                }.into_result()
            }
        }

    }
}


pub JodinFile: JodinResult<JodinNode> = TopLevelDeclarations;

pub TopLevelDeclarations: JodinResult<JodinNode> = {
    <decs:TopLevelDeclarationsList> => JodinNodeType::TopLevelDeclarations {decs: decs? }.into_result()
}

TopLevelDeclarationsList: JodinResult<Vec<JodinNode>> = {
  <dec:TopLevelDeclaration> => Ok(vec![dec?]),
  <v:TopLevelDeclarationsList> <dec:TopLevelDeclaration> => {
    let mut vector = v?;
    vector.push(dec?);
    Ok(vector)
  }
};


pub TopLevelDeclaration: JodinResult<JodinNode> = {
    WithVisibility<VariableDeclaration>,
    WithVisibility<StructureDefinition>,
    WithVisibility<TraitDefinition>,
    InNamespace,
    ";" => JodinNodeType::Empty.into_result()
};

InNamespace: JodinResult<JodinNode> = {
    "in" <id:Identifier> <dec:TopLevelDeclaration> => {
        JodinNodeType::InNamespace {
            namespace: JodinNodeType::Identifier(id).into(),
            inner: dec?
        }.into_result()
    },
    "in" <id:Identifier> "{" <decs:TopLevelDeclarations> "}" => {
        JodinNodeType::InNamespace {
            namespace: JodinNodeType::Identifier(id).into(),
            inner: decs?
        }.into_result()
    }
}

StorageModifier: StorageModifier ={
    "let" => StorageModifier::Local,
    "const" => StorageModifier::Const,
    "static" => StorageModifier::Static
}


VariableDeclaration: ParseResult = {
    <storage:StorageModifier> <id:SingleIdentifier> ":" <ty:CanonicalType> ";" => {
    JodinNodeType::StoreVariable {
        storage_type: storage,
        name: JodinNodeType::Identifier(id).into(),
        var_type: ty,
        maybe_initial_value: None
    }.into_result()
 },
    <storage:StorageModifier> <id:SingleIdentifier> ":" <ty:CanonicalType> "=" <value:Expression> ";" => {
        JodinNodeType::StoreVariable {
                storage_type: storage,
                name: JodinNodeType::Identifier(id).into(),
                var_type: ty,
                maybe_initial_value: Some(value?)
            }.into_result()
  },
}


StructInitializer: ParseResult = {
    "struct" <ty:Identifier> "{" <fields:StructFieldInitializer*> "}" => {
        JodinNodeType::StructInitializer {
            struct_id: JodinNodeType::Identifier(ty).into(),
            fields_and_values: fields.unwrap_vec()?
        }.into_result()
    }
}


StructFieldInitializer: JodinResult<(JodinNode, JodinNode)> = {
    <id:Identifier> "=" <val:Expression> => {
        Ok((JodinNodeType::Identifier(id).into(), val?))
  }
}

ArrayInitializer: ParseResult = {
    "[" <val:Expression> ":" <repeats:ConstExpression> "]" => {
        JodinNodeType::RepeatedArrayInitializer {
            to_repeat: val?,
            repeats: repeats?
        }.into_result()
    },
    "[" <vals:OptionalList<Expression>> "]" => {
        JodinNodeType::ListInitializer {
            values: vals.unwrap_vec()?
        }.into_result()
    }
}



BiOperator: Operator = {
    "t_operator",
    "<" => Operator::Lt,
    ">" => Operator::Gt,
    "*" => Operator::Star,
    "+" => Operator::Plus,
    "-" => Operator::Minus,
}


pub FunctionDefinition: ParseResult = {
    "fn" <id:Identifier> "(" <params:Parameters> ")" <compound:CompoundStatement> => {
        JodinNodeType::FunctionDefinition {
            name: JodinNodeType::Identifier(id).into(),
            return_type: IntermediateType::void(),
            arguments: params,
            block: compound?
        }.into_result()
    },
    "fn" <id:Identifier> "(" <params:Parameters> ")" "->" <ret:CanonicalType> <compound:CompoundStatement> => {
        JodinNodeType::FunctionDefinition {
            name: JodinNodeType::Identifier(id).into(),
            return_type: ret,
            arguments: params,
            block: compound?
        }.into_result()
    }
}



Inheritance: JodinNode = {
    ":" <List<IdentifierNode>> => JodinNode::from_iter(<>)
}


Parameters = OptionalList<Parameter>;

Parameter: JodinNode = {
    <name:Identifier> ":" <var_type:CanonicalType> => {
        JodinNodeType::NamedValue {
            name: JodinNodeType::Identifier(name).into(),
            var_type
        }.into()
    }
}

pub StructureDefinition: ParseResult = {
    "struct" <id:IdentifierNode> "{"
        <members:Parameters>
    "}" => {
        JodinNodeType::CompoundTypeDefinition {
            compound_type: CompoundType::Structure,
            name: id,
            inheritance: None,
            members
        }.into_result()
    }
}

pub FunctionDefinitionOrSignature: ParseResult = {
    FunctionDefinition,
    "fn" <id:Identifier> "(" <params:Parameters> ")" ";" => {
        JodinNodeType::FunctionSignature {
            name: JodinNodeType::Identifier(id).into(),
            return_type: IntermediateType::void(),
            arguments: params,
        }.into_result()
    },
    "fn" <id:Identifier> "(" <params:Parameters> ")" "->" <ret:CanonicalType> ";" => {
            JodinNodeType::FunctionSignature {
                name: JodinNodeType::Identifier(id).into(),
                return_type: ret,
                arguments: params,
            }.into_result()
    }
}

pub TraitDefinition: ParseResult = {
    "trait" <name:IdentifierNode> <inheritance:Inheritance?> "{"
        <defs:FunctionDefinitionOrSignature*>
    "}" => {
        JodinNodeType::CompoundTypeDefinition {
            compound_type: CompoundType::Trait,
            name,
            inheritance,
            members: defs.unwrap_vec()?
        }.into_result()
    }
}


// macros

WithVisibility<Inner>: JodinResult<JodinNode> = {
    <vis:Visibility?> <inner:Inner> => {
        let mut inner: JodinNode = inner?;
        let vis = match vis {
            Some(vis) => {
                vis
            },
            None => Visibility::Protected
        };
        let tag = VisibilityTag::new(vis);
        inner.add_tag(tag)?;
        Ok(inner)
    }
}

Joined<T, Seperator>: Vec<T> = {
    <v:T> => vec![v],
    <mut hd:Joined<T, Seperator>> <u:Seperator> <tl:T> => {
        hd.push(tl);
        hd
    }
}


List<T>: Vec<T> = Joined<T, ",">;

Optional<T>: Option<T> = {
    <v:T?> => v
};

OptionalJoined<T, Seperator>: Vec<T> = {
    <list:Optional<Joined<T, Seperator>>> =>
    match list {
        Some(list) => list,
        None => vec![]
    }
};

OptionalList<T>: Vec<T> = OptionalJoined<T, ",">;


Tier<Op, NextTier>: JodinResult<JodinNode> = {
    <rhs:Tier<Op,NextTier>> <op:Op> <lhs:NextTier>  => {
        println!("parsed {:?} expression", op);
        JodinNodeType::Binop { op, lhs: lhs?, rhs: rhs? }.into_result()
    },
    NextTier
};

DerefOp<Op>: Operator = <op:Op> => if let Tok::Operator(op) = op {
    op
 } else {
    panic!()
 };

extern {
    type Location = usize;
    type Error = crate::core::error::JodinError;

    enum Tok<'input> {
        "t_constant" => Tok::Constant(<&'input str>),
        "t_identifier" => Tok::Identifier(<&'input str>),
        "t_string_literal" => Tok::StringLiteral(<&'input str>),
        "t_operator" => Tok::Op(<Operator>),
        ">" => Tok::Op(Operator::Gt),
        "<" => Tok::Op(Operator::Lt),
        "*" => Tok::Op(Operator::Star),
        "+" => Tok::Op(Operator::Plus),
        "-" => Tok::Op(Operator::Minus),
        "!" => Tok::Op(Operator::Not),
        "&" => Tok::Op(Operator::And),
        "++" => Tok::Increment,
        "--" => Tok::Decrement,
        "=" => Tok::Assign,
        "t_assign" => Tok::OpAssign(<Operator>),
        "break" => Tok::Break,
        "case" => Tok::Case,
        "char" => Tok::Char,
        "const" => Tok::Const,
        "continue" => Tok::Continue,
        "default" => Tok::Default,
        "double" => Tok::Double,
        "do" => Tok::Do,
        "else" => Tok::Else,
        "float" => Tok::Float,
        "for" => Tok::For,
        "if" => Tok::If,
        "int" => Tok::Int,
        "long" => Tok::Long,
        "return" => Tok::Return,
        "short" => Tok::Short,
        "static" => Tok::Static,
        "typedef" => Tok::Typedef,
        "union" => Tok::Union,
        "unsigned" => Tok::Unsigned,
        "struct" => Tok::Struct,
        "void" => Tok::Void,
        "while" => Tok::While,
        "class" => Tok::Class,
        "public" => Tok::Public,
        "private" => Tok::Private,
        "new" => Tok::New,
        "super" => Tok::Super,
        "virtual" => Tok::Virtual,
        "sizeof" => Tok::Sizeof,
        "boolean" => Tok::Boolean,
        "in" => Tok::In,
        "implement" => Tok::Implement,
        "internal" => Tok::Internal,
        "using" => Tok::Using,
        "typeof" => Tok::Typeof,
        "true" => Tok::True,
        "false" => Tok::False,
        "abstract" => Tok::Abstract,
        "is" => Tok::Is,
        "trait" => Tok::Trait,
        "enum" => Tok::Enum,
        "switch" => Tok::Switch,
        "as" => Tok::As,
        "..." => Tok::Varargs,
        "::" => Tok::Namespaced,
        "," => Tok::Comma,
        ";" => Tok::Semic,
        "(" => Tok::LPar,
        ")" => Tok::RPar,
        "[" => Tok::LBrac,
        "]" => Tok::RBrac,
        "{" => Tok::LCurl,
        "}" => Tok::RCurl,
        ":" => Tok::Colon,
        "?" => Tok::Qmark,
        "." => Tok::Dot,
        "->" => Tok::Point,
        "fn" => Tok::FunctionPointer,
        "let" => Tok::Let,
        "foreach" => Tok::Foreach
    }
}