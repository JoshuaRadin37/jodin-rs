Lalrpop Report File
========================================

Summary
----------------------------------------

Constructed 75 states

State Table
----------------------------------------

State 0 {

    UniOp   -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp   -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    __UniOp -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "++"  shift and goto 1
    "--"  shift and goto 2

    UniOp goto 21
}

State 1 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> "++" . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    CastExpression               goto 23
    Factor                       goto 24
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 2 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> "--" . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    CastExpression               goto 23
    Factor                       goto 35
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 3 {

    AtomModifier -> AtomModifier . FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier -> AtomModifier . GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier -> AtomModifier . "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor       -> AtomModifier .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    FunctionCall -> . "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    GetIndex     -> . "[" Expression "]"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Factor -> AtomModifier
        lookahead ")" "," ":" "?" "]" "t_operator" EOF

    "("          shift and goto 6
    "."          shift and goto 7
    "["          shift and goto 8

    FunctionCall goto 36
    GetIndex     goto 37
}

State 4 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> "(" . Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> "(" . CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ExpressionWrapper            -> . BinopExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    BinopExpression              goto 39
    CanonicalType                goto 40
    CastExpression               goto 23
    Expression                   goto 41
    ExpressionWrapper            goto 42
    Factor                       goto 9
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 5 {

    Atom -> "new" . CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom -> "new" . CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    CanonicalType goto 10
}

State 6 {

    ArgsList                          -> . OptionalList<Expression>
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression                   -> . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression                   -> . Factor BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression                    -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                        -> . ExpressionWrapper
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                        -> . ExpressionWrapper "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ExpressionWrapper                 -> . BinopExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    FunctionCall                      -> "(" . ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                        -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::">      -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::">      -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<Expression, ",">           -> . Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<Expression, ",">           -> . Joined<Expression, ","> "," Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                           -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<Expression, ",">> -> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<Expression, ",">> -> . Joined<Expression, ",">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    OptionalJoined<Expression, ",">   -> . Optional<Joined<Expression, ",">>
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    OptionalList<Expression>          -> . OptionalJoined<Expression, ",">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                            -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                             -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                             -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Optional<Joined<Expression, ",">> ->
        lookahead ")"

    "("                               shift and goto 4
    "++"                              shift and goto 1
    "--"                              shift and goto 2
    "false"                           shift and goto 30
    "new"                             shift and goto 5
    "t_constant"                      shift and goto 31
    "t_identifier"                    shift and goto 32
    "t_string_literal"                shift and goto 33
    "true"                            shift and goto 34

    ArgsList                          goto 43
    Atom                              goto 22
    AtomModifier                      goto 3
    BinopExpression                   goto 39
    CastExpression                    goto 23
    Expression                        goto 44
    ExpressionWrapper                 goto 42
    Factor                            goto 9
    Identifier                        goto 25
    Joined<"t_identifier", "::">      goto 26
    Joined<Expression, ",">           goto 45
    Literal                           goto 27
    Optional<Joined<Expression, ",">> goto 46
    OptionalJoined<Expression, ",">   goto 47
    OptionalList<Expression>          goto 48
    String                            goto 28
    UniOp                             goto 29
}

State 7 {

    AtomModifier     -> AtomModifier "." . SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    SingleIdentifier -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "t_identifier"   shift and goto 50

    SingleIdentifier goto 49
}

State 8 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ExpressionWrapper            -> . BinopExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    GetIndex                     -> "[" . Expression "]"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    BinopExpression              goto 39
    CastExpression               goto 23
    Expression                   goto 51
    ExpressionWrapper            goto 42
    Factor                       goto 9
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 9 {

    BinopExpression -> Factor .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression -> Factor . BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopTail       -> . "t_operator" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopTail+      -> . BinopTail
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopTail+      -> . BinopTail+ BinopTail
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction BinopExpression -> Factor
        lookahead ")" "," ":" "?" "]"

    "t_operator" shift and goto 14

    BinopTail  goto 54
    BinopTail+ goto 13
}

State 10 {

    Atom            -> "new" CanonicalType . GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom            -> "new" CanonicalType . "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    GenericInstance -> . "<" OptionalList<CanonicalType> ">"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("             shift and goto 15
    "<"             shift and goto 16

    GenericInstance goto 55
}

State 11 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> "(" CanonicalType ")" . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    CastExpression               goto 23
    Factor                       goto 58
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 12 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> ExpressionWrapper "?" . Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ExpressionWrapper            -> . BinopExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    BinopExpression              goto 39
    CastExpression               goto 23
    Expression                   goto 59
    ExpressionWrapper            goto 42
    Factor                       goto 9
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 13 {

    BinopExpression -> Factor BinopTail+ .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopTail       -> . "t_operator" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopTail+      -> BinopTail+ . BinopTail
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction BinopExpression -> Factor BinopTail+
        lookahead ")" "," ":" "?" "]"

    "t_operator" shift and goto 14

    BinopTail  goto 60
}

State 14 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopTail                    -> "t_operator" . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    CastExpression               goto 23
    Factor                       goto 61
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 15 {

    ArgsList                          -> . OptionalList<Expression>
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> "new" CanonicalType "(" . ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression                   -> . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression                   -> . Factor BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression                    -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                        -> . ExpressionWrapper
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                        -> . ExpressionWrapper "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ExpressionWrapper                 -> . BinopExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                        -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::">      -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::">      -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<Expression, ",">           -> . Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<Expression, ",">           -> . Joined<Expression, ","> "," Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                           -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<Expression, ",">> -> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<Expression, ",">> -> . Joined<Expression, ",">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    OptionalJoined<Expression, ",">   -> . Optional<Joined<Expression, ",">>
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    OptionalList<Expression>          -> . OptionalJoined<Expression, ",">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                            -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                             -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                             -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Optional<Joined<Expression, ",">> ->
        lookahead ")"

    "("                               shift and goto 4
    "++"                              shift and goto 1
    "--"                              shift and goto 2
    "false"                           shift and goto 30
    "new"                             shift and goto 5
    "t_constant"                      shift and goto 31
    "t_identifier"                    shift and goto 32
    "t_string_literal"                shift and goto 33
    "true"                            shift and goto 34

    ArgsList                          goto 62
    Atom                              goto 22
    AtomModifier                      goto 3
    BinopExpression                   goto 39
    CastExpression                    goto 23
    Expression                        goto 44
    ExpressionWrapper                 goto 42
    Factor                            goto 9
    Identifier                        goto 25
    Joined<"t_identifier", "::">      goto 26
    Joined<Expression, ",">           goto 45
    Literal                           goto 27
    Optional<Joined<Expression, ",">> goto 46
    OptionalJoined<Expression, ",">   goto 47
    OptionalList<Expression>          goto 48
    String                            goto 28
    UniOp                             goto 29
}

State 16 {

    GenericInstance                      -> "<" . OptionalList<CanonicalType> ">"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<CanonicalType, ",">           -> . CanonicalType
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<CanonicalType, ",">           -> . Joined<CanonicalType, ","> "," CanonicalType
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<CanonicalType, ",">> -> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<CanonicalType, ",">> -> . Joined<CanonicalType, ",">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    OptionalJoined<CanonicalType, ",">   -> . Optional<Joined<CanonicalType, ",">>
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    OptionalList<CanonicalType>          -> . OptionalJoined<CanonicalType, ",">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Optional<Joined<CanonicalType, ",">> ->
        lookahead ">"


    CanonicalType                        goto 63
    Joined<CanonicalType, ",">           goto 64
    Optional<Joined<CanonicalType, ",">> goto 65
    OptionalJoined<CanonicalType, ",">   goto 66
    OptionalList<CanonicalType>          goto 67
}

State 17 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ExpressionWrapper            -> . BinopExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<Expression, ",">      -> Joined<Expression, ","> "," . Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    BinopExpression              goto 39
    CastExpression               goto 23
    Expression                   goto 68
    ExpressionWrapper            goto 42
    Factor                       goto 9
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 18 {

    ArgsList                          -> . OptionalList<Expression>
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> "new" CanonicalType GenericInstance "(" . ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                              -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                      -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression                   -> . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression                   -> . Factor BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression                    -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                        -> . ExpressionWrapper
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                        -> . ExpressionWrapper "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ExpressionWrapper                 -> . BinopExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                            -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                        -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::">      -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::">      -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<Expression, ",">           -> . Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<Expression, ",">           -> . Joined<Expression, ","> "," Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                           -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<Expression, ",">> -> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<Expression, ",">> -> . Joined<Expression, ",">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    OptionalJoined<Expression, ",">   -> . Optional<Joined<Expression, ",">>
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    OptionalList<Expression>          -> . OptionalJoined<Expression, ",">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                            -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                             -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                             -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Optional<Joined<Expression, ",">> ->
        lookahead ")"

    "("                               shift and goto 4
    "++"                              shift and goto 1
    "--"                              shift and goto 2
    "false"                           shift and goto 30
    "new"                             shift and goto 5
    "t_constant"                      shift and goto 31
    "t_identifier"                    shift and goto 32
    "t_string_literal"                shift and goto 33
    "true"                            shift and goto 34

    ArgsList                          goto 69
    Atom                              goto 22
    AtomModifier                      goto 3
    BinopExpression                   goto 39
    CastExpression                    goto 23
    Expression                        goto 44
    ExpressionWrapper                 goto 42
    Factor                            goto 9
    Identifier                        goto 25
    Joined<"t_identifier", "::">      goto 26
    Joined<Expression, ",">           goto 45
    Literal                           goto 27
    Optional<Joined<Expression, ",">> goto 46
    OptionalJoined<Expression, ",">   goto 47
    OptionalList<Expression>          goto 48
    String                            goto 28
    UniOp                             goto 29
}

State 19 {

    Atom                         -> . Identifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "(" Expression ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Atom                         -> . "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . Atom
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier FunctionCall
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier GetIndex
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    AtomModifier                 -> . AtomModifier "." SingleIdentifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    BinopExpression              -> . Factor BinopTail+
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    CastExpression               -> . "(" CanonicalType ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> . ExpressionWrapper "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression                   -> ExpressionWrapper "?" Expression ":" . Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ExpressionWrapper            -> . BinopExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . AtomModifier
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . CastExpression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . Literal
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . String
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . UniOp
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "false"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Factor                       -> . "true"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Identifier                   -> . Joined<"t_identifier", "::">
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Literal                      -> . "t_constant"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    String                       -> . "t_string_literal"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "++" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    UniOp                        -> . "--" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "("                          shift and goto 4
    "++"                         shift and goto 1
    "--"                         shift and goto 2
    "false"                      shift and goto 30
    "new"                        shift and goto 5
    "t_constant"                 shift and goto 31
    "t_identifier"               shift and goto 32
    "t_string_literal"           shift and goto 33
    "true"                       shift and goto 34

    Atom                         goto 22
    AtomModifier                 goto 3
    BinopExpression              goto 39
    CastExpression               goto 23
    Expression                   goto 72
    ExpressionWrapper            goto 42
    Factor                       goto 9
    Identifier                   goto 25
    Joined<"t_identifier", "::"> goto 26
    Literal                      goto 27
    String                       goto 28
    UniOp                        goto 29
}

State 20 {

    Joined<CanonicalType, ","> -> Joined<CanonicalType, ","> "," . CanonicalType
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    CanonicalType goto 74
}

State 21 {

    __UniOp -> UniOp .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction __UniOp -> UniOp
        lookahead EOF


}

State 22 {

    AtomModifier -> Atom .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction AtomModifier -> Atom
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 23 {

    Factor -> CastExpression .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Factor -> CastExpression
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 24 {

    UniOp -> "++" Factor .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction UniOp -> "++" Factor
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 25 {

    Atom -> Identifier .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Atom -> Identifier
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 26 {

    Identifier                   -> Joined<"t_identifier", "::"> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Joined<"t_identifier", "::"> -> Joined<"t_identifier", "::"> . "::" "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Identifier -> Joined<"t_identifier", "::">
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF

    "::" shift and goto 38

}

State 27 {

    Factor -> Literal .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Factor -> Literal
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 28 {

    Factor -> String .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Factor -> String
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 29 {

    Factor -> UniOp .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Factor -> UniOp
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 30 {

    Factor -> "false" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Factor -> "false"
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 31 {

    Literal -> "t_constant" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Literal -> "t_constant"
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 32 {

    Joined<"t_identifier", "::"> -> "t_identifier" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Joined<"t_identifier", "::"> -> "t_identifier"
        lookahead "(" ")" "," "." ":" "::" "?" "[" "]" "t_operator" EOF


}

State 33 {

    String -> "t_string_literal" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction String -> "t_string_literal"
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 34 {

    Factor -> "true" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Factor -> "true"
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 35 {

    UniOp -> "--" Factor .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction UniOp -> "--" Factor
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 36 {

    AtomModifier -> AtomModifier FunctionCall .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction AtomModifier -> AtomModifier FunctionCall
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 37 {

    AtomModifier -> AtomModifier GetIndex .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction AtomModifier -> AtomModifier GetIndex
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 38 {

    Joined<"t_identifier", "::"> -> Joined<"t_identifier", "::"> "::" . "t_identifier"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "t_identifier" shift and goto 52

}

State 39 {

    ExpressionWrapper -> BinopExpression .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction ExpressionWrapper -> BinopExpression
        lookahead ")" "," ":" "?" "]"


}

State 40 {

    CastExpression -> "(" CanonicalType . ")" Factor
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ")" shift and goto 11

}

State 41 {

    Atom -> "(" Expression . ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ")" shift and goto 53

}

State 42 {

    Expression -> ExpressionWrapper .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Expression -> ExpressionWrapper . "?" Expression ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Expression -> ExpressionWrapper
        lookahead ")" "," ":" "]"

    "?" shift and goto 12

}

State 43 {

    FunctionCall -> "(" ArgsList . ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ")" shift and goto 56

}

State 44 {

    Joined<Expression, ","> -> Expression .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Joined<Expression, ","> -> Expression
        lookahead ")" ","


}

State 45 {

    Joined<Expression, ",">           -> Joined<Expression, ","> . "," Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<Expression, ",">> -> Joined<Expression, ","> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Optional<Joined<Expression, ",">> -> Joined<Expression, ",">
        lookahead ")"

    "," shift and goto 17

}

State 46 {

    OptionalJoined<Expression, ","> -> Optional<Joined<Expression, ",">> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction OptionalJoined<Expression, ","> -> Optional<Joined<Expression, ",">>
        lookahead ")"


}

State 47 {

    OptionalList<Expression> -> OptionalJoined<Expression, ","> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction OptionalList<Expression> -> OptionalJoined<Expression, ",">
        lookahead ")"


}

State 48 {

    ArgsList -> OptionalList<Expression> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction ArgsList -> OptionalList<Expression>
        lookahead ")"


}

State 49 {

    AtomModifier -> AtomModifier "." SingleIdentifier .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction AtomModifier -> AtomModifier "." SingleIdentifier
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 50 {

    SingleIdentifier -> "t_identifier" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction SingleIdentifier -> "t_identifier"
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 51 {

    GetIndex -> "[" Expression . "]"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "]" shift and goto 57

}

State 52 {

    Joined<"t_identifier", "::"> -> Joined<"t_identifier", "::"> "::" "t_identifier" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Joined<"t_identifier", "::"> -> Joined<"t_identifier", "::"> "::" "t_identifier"
        lookahead "(" ")" "," "." ":" "::" "?" "[" "]" "t_operator" EOF


}

State 53 {

    Atom -> "(" Expression ")" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Atom -> "(" Expression ")"
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 54 {

    BinopTail+ -> BinopTail .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction BinopTail+ -> BinopTail
        lookahead ")" "," ":" "?" "]" "t_operator"


}

State 55 {

    Atom -> "new" CanonicalType GenericInstance . "(" ArgsList ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    "(" shift and goto 18

}

State 56 {

    FunctionCall -> "(" ArgsList ")" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction FunctionCall -> "(" ArgsList ")"
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 57 {

    GetIndex -> "[" Expression "]" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction GetIndex -> "[" Expression "]"
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 58 {

    CastExpression -> "(" CanonicalType ")" Factor .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction CastExpression -> "(" CanonicalType ")" Factor
        lookahead ")" "," ":" "?" "]" "t_operator" EOF


}

State 59 {

    Expression -> ExpressionWrapper "?" Expression . ":" Expression
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ":" shift and goto 19

}

State 60 {

    BinopTail+ -> BinopTail+ BinopTail .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction BinopTail+ -> BinopTail+ BinopTail
        lookahead ")" "," ":" "?" "]" "t_operator"


}

State 61 {

    BinopTail -> "t_operator" Factor .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction BinopTail -> "t_operator" Factor
        lookahead ")" "," ":" "?" "]" "t_operator"


}

State 62 {

    Atom -> "new" CanonicalType "(" ArgsList . ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ")" shift and goto 70

}

State 63 {

    Joined<CanonicalType, ","> -> CanonicalType .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Joined<CanonicalType, ","> -> CanonicalType
        lookahead "," ">"


}

State 64 {

    Joined<CanonicalType, ",">           -> Joined<CanonicalType, ","> . "," CanonicalType
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    Optional<Joined<CanonicalType, ",">> -> Joined<CanonicalType, ","> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Optional<Joined<CanonicalType, ",">> -> Joined<CanonicalType, ",">
        lookahead ">"

    "," shift and goto 20

}

State 65 {

    OptionalJoined<CanonicalType, ","> -> Optional<Joined<CanonicalType, ",">> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction OptionalJoined<CanonicalType, ","> -> Optional<Joined<CanonicalType, ",">>
        lookahead ">"


}

State 66 {

    OptionalList<CanonicalType> -> OptionalJoined<CanonicalType, ","> .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction OptionalList<CanonicalType> -> OptionalJoined<CanonicalType, ",">
        lookahead ">"


}

State 67 {

    GenericInstance -> "<" OptionalList<CanonicalType> . ">"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ">" shift and goto 71

}

State 68 {

    Joined<Expression, ","> -> Joined<Expression, ","> "," Expression .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Joined<Expression, ","> -> Joined<Expression, ","> "," Expression
        lookahead ")" ","


}

State 69 {

    Atom -> "new" CanonicalType GenericInstance "(" ArgsList . ")"
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF

    ")" shift and goto 73

}

State 70 {

    Atom -> "new" CanonicalType "(" ArgsList ")" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Atom -> "new" CanonicalType "(" ArgsList ")"
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 71 {

    GenericInstance -> "<" OptionalList<CanonicalType> ">" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction GenericInstance -> "<" OptionalList<CanonicalType> ">"
        lookahead "("


}

State 72 {

    Expression -> ExpressionWrapper "?" Expression ":" Expression .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Expression -> ExpressionWrapper "?" Expression ":" Expression
        lookahead ")" "," ":" "]"


}

State 73 {

    Atom -> "new" CanonicalType GenericInstance "(" ArgsList ")" .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Atom -> "new" CanonicalType GenericInstance "(" ArgsList ")"
        lookahead "(" ")" "," "." ":" "?" "[" "]" "t_operator" EOF


}

State 74 {

    Joined<CanonicalType, ","> -> Joined<CanonicalType, ","> "," CanonicalType .
        lookahead "(" ")" "++" "," "--" "." "..." ":" "::" ";" "<" ">" "?" "[" "]" "abstract" "as" "boolean" "break" "case" "char" "class" "const" "continue" "default" "do" "double" "else" "enum" "false" "float" "for" "if" "implement" "in" "int" "internal" "is" "long" "new" "private" "public" "return" "short" "sizeof" "static" "struct" "super" "switch" "t_assign" "t_constant" "t_identifier" "t_operator" "t_string_literal" "trait" "true" "typedef" "typeof" "union" "unsigned" "using" "virtual" "void" "while" "{" "}" EOF


    reduction Joined<CanonicalType, ","> -> Joined<CanonicalType, ","> "," CanonicalType
        lookahead "," ">"


}
