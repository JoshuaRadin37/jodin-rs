JodinNode {
	attributes: []
	inner: TopLevelDeclarations {
    decs: [
        JodinNode {
        	attributes: []
        	inner: ImportIdentifiers {
            import_data: Import {
                id: std,
                import_type: Children {
                    children: [
                        Import {
                            id: String,
                            import_type: Direct,
                        },
                        Import {
                            id: stdio,
                            import_type: Wildcard,
                        },
                        Import {
                            id: stdio,
                            import_type: Direct,
                        },
                    ],
                },
            },
        }
        },
        JodinNode {
        	attributes: []
        	inner: VarDeclarations {
            var_type: JodinNode {
            	attributes: []
            	inner: Type(
                IntermediateType {
                    is_const: false,
                    type_specifier: Primitive(
                        Int,
                    ),
                    generics: [],
                    tails: [
                        Pointer,
                        Function(
                            [
                                IntermediateType {
                                    is_const: false,
                                    type_specifier: Primitive(
                                        Int,
                                    ),
                                    generics: [],
                                    tails: [],
                                },
                                IntermediateType {
                                    is_const: false,
                                    type_specifier: Id(
                                        String,
                                    ),
                                    generics: [],
                                    tails: [
                                        Array(
                                            None,
                                        ),
                                    ],
                                },
                            ],
                        ),
                    ],
                },
            )
            },
            names: [
                JodinNode {
                	attributes: []
                	inner: Identifier(
                    main,
                )
                },
            ],
            values: [
                None,
            ],
        }
        },
        JodinNode {
        	attributes: []
        	inner: VarDeclarations {
            var_type: JodinNode {
            	attributes: []
            	inner: Type(
                IntermediateType {
                    is_const: true,
                    type_specifier: Primitive(
                        UnsignedLong,
                    ),
                    generics: [],
                    tails: [
                        Array(
                            Some(
                                JodinNode {
                                	attributes: []
                                	inner: Binop {
                                    op: Plus,
                                    lhs: JodinNode {
                                    	attributes: []
                                    	inner: Literal(
                                        Int(
                                            9,
                                        ),
                                    )
                                    },
                                    rhs: JodinNode {
                                    	attributes: []
                                    	inner: Binop {
                                        op: Minus,
                                        lhs: JodinNode {
                                        	attributes: []
                                        	inner: Literal(
                                            Int(
                                                2,
                                            ),
                                        )
                                        },
                                        rhs: JodinNode {
                                        	attributes: []
                                        	inner: Binop {
                                            op: Plus,
                                            lhs: JodinNode {
                                            	attributes: []
                                            	inner: Literal(
                                                Int(
                                                    3,
                                                ),
                                            )
                                            },
                                            rhs: JodinNode {
                                            	attributes: []
                                            	inner: Literal(
                                                Int(
                                                    4,
                                                ),
                                            )
                                            },
                                        }
                                        },
                                    }
                                    },
                                }
                                },
                            ),
                        ),
                    ],
                },
            )
            },
            names: [
                JodinNode {
                	attributes: []
                	inner: Identifier(
                    array,
                )
                },
            ],
            values: [
                None,
            ],
        }
        },
        JodinNode {
        	attributes: []
        	inner: VarDeclarations {
            var_type: JodinNode {
            	attributes: []
            	inner: Type(
                IntermediateType {
                    is_const: false,
                    type_specifier: Primitive(
                        Boolean,
                    ),
                    generics: [],
                    tails: [],
                },
            )
            },
            names: [
                JodinNode {
                	attributes: []
                	inner: Identifier(
                    yes,
                )
                },
            ],
            values: [
                Some(
                    JodinNode {
                    	attributes: []
                    	inner: Unimplemented {
                        jodin_rule: initializer,
                        affected_string: "true",
                    }
                    },
                ),
            ],
        }
        },
        JodinNode {
        	attributes: []
        	inner: VarDeclarations {
            var_type: JodinNode {
            	attributes: []
            	inner: Type(
                IntermediateType {
                    is_const: false,
                    type_specifier: Id(
                        Option,
                    ),
                    generics: [
                        IntermediateType {
                            is_const: false,
                            type_specifier: Primitive(
                                Double,
                            ),
                            generics: [],
                            tails: [],
                        },
                    ],
                    tails: [
                        Function(
                            [
                                IntermediateType {
                                    is_const: false,
                                    type_specifier: Primitive(
                                        Double,
                                    ),
                                    generics: [],
                                    tails: [],
                                },
                            ],
                        ),
                    ],
                },
            )
            },
            names: [
                JodinNode {
                	attributes: []
                	inner: Identifier(
                    sqrt,
                )
                },
            ],
            values: [
                None,
            ],
        }
        },
        JodinNode {
        	attributes: []
        	inner: Unimplemented {
            jodin_rule: class_definition,
            affected_string: "class Hello {\n    Hello() {}\n}",
        }
        },
        JodinNode {
        	attributes: []
        	inner: Unimplemented {
            jodin_rule: class_definition,
            affected_string: "class Jello : Hi  {\n\n    Jello() {\n        int a = (int) 3+2*7/8;\n    }\n}",
        }
        },
        JodinNode {
        	attributes: ["VisibilityTag"]
        	inner: StructureDefinition {
            name: JodinNode {
            	attributes: []
            	inner: Identifier(
                a1,
            )
            },
            members: [
                JodinNode {
                	attributes: []
                	inner: NamedValue {
                    name: JodinNode {
                    	attributes: []
                    	inner: Identifier(
                        a,
                    )
                    },
                    var_type: IntermediateType {
                        is_const: false,
                        type_specifier: Primitive(
                            Int,
                        ),
                        generics: [],
                        tails: [],
                    },
                }
                },
            ],
        }
        },
        JodinNode {
        	attributes: []
        	inner: Unimplemented {
            jodin_rule: function_definition,
            affected_string: "int main(int argc, String[] args) {\n    println(\"Hello world!\");\n    stdio::println(\"Hello world!\");\n    return 0;\n}",
        }
        },
    ],
}
}
